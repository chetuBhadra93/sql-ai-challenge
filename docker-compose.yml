services:
  postgres:
    image: postgres:15-alpine
    container_name: sql-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sql_ai_db}
      POSTGRES_USER: ${POSTGRES_USER:-sql_ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sql_ai_password}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgresql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sql_ai_user} -d ${POSTGRES_DB:-sql_ai_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: sql-ai-api
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - API_PORT=${API_PORT:-3000}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-sql_ai_db}
      - POSTGRES_USER=${POSTGRES_USER:-sql_ai_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sql_ai_password}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - ALLOW_WRITE_SQL=${ALLOW_WRITE_SQL:-false}
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/query/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  default:
    name: sql-ai-network
